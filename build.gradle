/*
* This file was generated by the Gradle 'init' task.
*/
import org.gradle.crypto.checksum.Checksum
plugins {
	id "java"
	id "maven-publish"
	id "application"
	id "com.diffplug.gradle.spotless" version "5.16.0"
	id "io.toolebox.git-versioner" version "1.6.5"
	id "org.gradle.crypto.checksum" version "1.2.0"
	id "com.github.breadmoirai.github-release" version "2.2.12"
	id "de.fuerstenau.buildconfig" version "1.1.8"
	id "com.adarshr.test-logger" version "2.1.1"
	id "com.geoffgranum.gradle-conventional-changelog" version "0.3.1"
	id "org.sonarqube" version "3.3"
	id "jacoco"
}

application {
	mainClassName = 'com.javastreets.mulefd.app.Application'
}
repositories {
	mavenCentral()
}

// Reproducible build to preserve checksum value with rebuilds
tasks.withType(AbstractArchiveTask) {
	preserveFileTimestamps = false
	reproducibleFileOrder = true
}


test {
	useJUnitPlatform()
	finalizedBy jacocoTestReport

}

jacocoTestReport {
	dependsOn test // tests are required to run before generating the report
	reports {
		xml.enabled true
		html.enabled true
		csv.enabled false
		html.destination file("${buildDir}/jacocoHtml")
		xml.destination file("${buildDir}/jacocoXml")
	}
}

dependencies {
	implementation 'guru.nidi:graphviz-java-all-j2v8:0.17.0'
	implementation 'ch.qos.logback:logback-classic:1.2.5'
	implementation 'info.picocli:picocli:4.6.1'
	testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
	testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.0'
	testImplementation 'org.assertj:assertj-core:3.20.2'
	testImplementation 'org.mockito:mockito-core:3.12.4'
	testImplementation 'io.github.netmikey.logunit:logunit-core:1.1.0'
	testImplementation 'io.github.netmikey.logunit:logunit-logback:1.1.0'
	testImplementation 'org.skyscreamer:jsonassert:1.5.0'
}

spotless {
	format 'misc', {
		target '**/*.gradle', '**/*.adoc', '**/.gitignore'
		targetExclude 'src/main/scripts/container/README.md', 'build/container/README.md'
		trimTrailingWhitespace()
		indentWithTabs(4) // or spaces. Takes an integer argument if you don't like 4
		endWithNewline()
	}
	java {
		importOrder 'java', 'javax', 'org', 'com', 'com.github.manikmagar', ''
		removeUnusedImports()
		eclipse().configFile "eclipse-java-google-style.xml"
	}
}

task createChecksum(type: Checksum) {
	dependsOn(assembleDist)
	files = files([distZip, distTar].outputs.files.flatten())
	outputDir = distZip.destinationDirectory.asFile.get()
	algorithm = Checksum.Algorithm.SHA256
}
distZip.finalizedBy(createChecksum)

publishing {
	publications {
		maven(MavenPublication) {
			from(components.java)
		}
	}
}

versioner {
	startFrom {
		major = 0
		minor = 0
		patch = 1
	}
	git {
		authentication {
			https {
				token = System.getenv("GITHUB_TOKEN") != null ? System.getenv("GITHUB_TOKEN") : "unknown_github_token"
			}
		}
	}
}

buildConfig {
	clsName = 'BuildConfig'      // sets the name of the BuildConfig class
	packageName = 'com.javastreets.mulefd.app'  // sets the package of the BuildConfig class,
	charset = 'UTF-8'            // sets charset of the generated class,
	// 'UTF-8' if not set otherwise
}


task homebrew(type: Copy) {
	dependsOn(createChecksum)
	inputs.property('version', project.version)
	from('src/main/scripts/brew/mulefd.rb')
	into(buildDir.toString() + '/brew/formula')
	doFirst { t ->
		t.filter(org.apache.tools.ant.filters.ReplaceTokens,
				tokens: [
						projectVersion: project.version,
						sha256        : new File(distZip.archiveFile.asFile.get().absolutePath + '.sha256').text
				]
		)
	}
}

task container(type: Copy) {
	dependsOn(createChecksum)
	inputs.property('version', project.version)
	from('src/main/scripts/container/')
	include('*')
	into(buildDir.toString() + '/container')
	doFirst { t ->
		t.filter(org.apache.tools.ant.filters.ReplaceTokens,
				tokens: [
						projectVersion: project.version,
						sha256        : new File(distZip.archiveFile.asFile.get().absolutePath + '.sha256').text
				]
		)
	}
}


task scoop(type: Copy) {
	dependsOn(createChecksum)
	inputs.property('version', project.version)
	from('src/main/scripts/scoop/mulefd.json')
	into(buildDir.toString() + '/scoop')
	doFirst { t ->
		t.filter(org.apache.tools.ant.filters.ReplaceTokens,
				tokens: [
						projectVersion: project.version,
						sha256        : new File(distZip.archiveFile.asFile.get().absolutePath + '.sha256').text
				]
		)
	}
}

task tag(type: Exec) {
	doFirst {
		println 'Tagging with v' + project.version
		commandLine 'git', 'tag', '-a', 'v' + project.version, '-F', 'CHANGELOG.md'
	}
}

githubRelease {
	token System.getenv("GITHUB_TOKEN") != null ? System.getenv("GITHUB_TOKEN") : "unknown_github_token" // This is your personal access token with Repo permissions
	owner "manikmagar" // default is the last part of your group. Eg group: "com.github.breadmoirai" => owner: "breadmoirai"
	repo "mulefd" // by default this is set to your project name
	body "## News" // by default this is empty
	draft true // by default this is false
	allowUploadToExisting true	// Reuse releases already drafted by release-drafter plugin
	releaseAssets distZip.destinationDirectory.asFileTree.toList() // this points to which files you want to upload as assets with your release
}

compileJava {
	options.encoding = 'UTF-8'
	// options.compilerArgs << "-Xlint:unchecked"
}

compileTestJava {
	options.encoding = 'UTF-8'
	// options.compilerArgs << "-Xlint:unchecked"
}



sonarqube {
	properties {
		property "sonar.projectKey", "manikmagar_mulefd"
		property "sonar.organization", "manikmagar"
		property "sonar.host.url", "https://sonarcloud.io"
		property "sonar.coverage.jacoco.xmlReportPaths", "${buildDir}/jacocoXml"
	}
}


build.dependsOn(homebrew)
build.dependsOn(scoop)
build.dependsOn(container)


group = 'com.javastreets'
sourceCompatibility = '1.8'
